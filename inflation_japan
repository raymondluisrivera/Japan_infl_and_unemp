{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This project will examine whether the phillips curve holds within the Japanese economy. The Phillips Curve is a relationship documented which purportes that there exist an inverse relationship between unemployment and inflation (i.e. as unemployment increases, inflation decreaces and vice-versa.)  Interestingly enough, the economist whom the relationship is named after, William Phillips, did not write about the inverse relationship between unemployment and inflation, rather the inverse relationship between unemployment and wage rates. The inflation part of the model was added by later economist, most notably, Milton Freedman."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import necessary packages\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython import display\n",
    "#import csv's\n",
    "cpi = pd.read_csv(r'C:\\Users\\raymo\\OneDrive\\Desktop\\japan Inflation\\cpi_japan.csv')\n",
    "unemployment = pd.read_csv(r'C:\\Users\\raymo\\OneDrive\\Desktop\\japan Inflation\\unemployment_japan.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 734 entries, 0 to 733\n",
      "Data columns (total 2 columns):\n",
      "DATE               734 non-null object\n",
      "JPNCPIALLMINMEI    734 non-null float64\n",
      "dtypes: float64(1), object(1)\n",
      "memory usage: 11.6+ KB\n"
     ]
    }
   ],
   "source": [
    "#calculate inflation rate according to Japan's Consumer Price Index\n",
    "cpi_copy = cpi.copy()\n",
    "cpi_copy\n",
    "#check column dtyoes\n",
    "cpi_copy.info()\n",
    "#change 'DATE' tp date time dtype\n",
    "#change 'JPNCPIALLMINMEI' to 'cpi'\n",
    "cpi_copy['DATE'] = pd.to_datetime(cpi_copy['DATE'])\n",
    "cpi_copy = cpi_copy.rename(columns = {\n",
    "                                        'DATE': 'date',\n",
    "                                        'JPNCPIALLMINMEI': 'cpi'\n",
    "                                      }\n",
    "                          )\n",
    "#seperate cpi column from cpi_copy to calculate inflation rate\n",
    "cpi_series = cpi_copy['cpi']\n",
    "#use list comprehension to calculate inflation rate: inflation equation = ((y -x)/x)*100\n",
    "inflation_rate = pd.Series([((y - x) / x)* 100 for x, y in zip(cpi_series, cpi_series[1:])])\n",
    "#appennd inflation_rate to cpi_copy\n",
    "cpi_copy['inflation_rate'] = inflation_rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cpi</th>\n",
       "      <th>inflation_rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1960</td>\n",
       "      <td>18.311748</td>\n",
       "      <td>0.309469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1961</td>\n",
       "      <td>19.294806</td>\n",
       "      <td>0.661000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1962</td>\n",
       "      <td>20.613692</td>\n",
       "      <td>0.486045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1963</td>\n",
       "      <td>21.996232</td>\n",
       "      <td>0.308253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1964</td>\n",
       "      <td>22.832174</td>\n",
       "      <td>0.559331</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            cpi  inflation_rate\n",
       "date                           \n",
       "1960  18.311748        0.309469\n",
       "1961  19.294806        0.661000\n",
       "1962  20.613692        0.486045\n",
       "1963  21.996232        0.308253\n",
       "1964  22.832174        0.559331"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#group cpi_copy by date in order to get yearly average of cpi and inflation\n",
    "grouped_cpi = cpi_copy.groupby(by = cpi_copy.date.dt.year)\n",
    "#check yearly inflation rate\n",
    "final_cpi = grouped_cpi.sum()/12 \n",
    "final_cpi.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unempl_rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1970</td>\n",
       "      <td>1.183333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1971</td>\n",
       "      <td>1.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1972</td>\n",
       "      <td>1.433333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1973</td>\n",
       "      <td>1.283333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1974</td>\n",
       "      <td>1.416667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      unempl_rate\n",
       "date             \n",
       "1970     1.183333\n",
       "1971     1.250000\n",
       "1972     1.433333\n",
       "1973     1.283333\n",
       "1974     1.416667"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create copy of unemployment df\n",
    "unempl_copy = unemployment.copy()\n",
    "# unempl_copy.info()\n",
    "#change DATE to datetime \n",
    "unempl_copy['DATE'] = pd.to_datetime(unempl_copy['DATE'])\n",
    "#change column names 'DATE' to 'date' and 'LRUN64TTJPM156S' to 'uempl_rate'\n",
    "unempl_copy = unempl_copy.rename(columns = {\n",
    "                                            'DATE': 'date',\n",
    "                                            'LRUN64TTJPM156S': 'unempl_rate'\n",
    "                                            }\n",
    "                                )\n",
    "unempl_copy\n",
    "#group unempl_rate by date to get yearly averages\n",
    "grouped_unempl = unempl_copy.groupby(by = unempl_copy.date.dt.year)\n",
    "final_unempl = grouped_unempl.sum() / 12 \n",
    "final_unempl.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize = (15,10))\n",
    "\n",
    "x1 = final_cpi['inflation_rate'].loc[1970:] #start @ 1970 because unempl starts @ 1970 \n",
    "\n",
    "#unemployment data\n",
    "\n",
    "y1 = final_unempl['unempl_rate']\n",
    "\n",
    "ax.set_title(\"Japan's Phillips Curve 1970 - 2021\")\n",
    "\n",
    "ax.set_ylabel('Unemployment Rate(%)')\n",
    "ax.set_xlabel('Inflation Rate(%)')\n",
    "\n",
    "#plot inflation_data\n",
    "\n",
    "ax.scatter(x1, y1)\n",
    "\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So, what exactly is going on here? Taking a look at the chart above shows us that as unemployment rates increase, inflation decreases. The opposite is true as well. So, yes, the Phillips Curve relationship holds. But, why does this relationship exist? When a large portion of the population is employed, their collective buying power increases and they have choices between products. This spurs competition among firms selling similar products and prices are lowered in this demand-driven market. When unemployment increases, collective buying power decreases. People spend less and save more, this causes a firms supply to swell and in order to make up for profit loss, they increase the prices of their products. This increase in price devalues a currency's purchasing power and wala, inflation increases. Since its discovery, economic planning has been centered around the Phillips Curve. However, the relationship famously failed in the 1970's when the US experienced stagflation, a positve relationship between unemployment and inflation. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
